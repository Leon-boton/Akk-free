
// –±–∞—Ç–æ–Ω –Ω–æ–≤–∞—è
function toggleSidebarAlt(btn) {
  const sidebar = document.getElementById('sidebar');
  sidebar.classList.toggle('active');
  btn.classList.toggle('active');
}

//–≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ —É–≤–µ–¥
function showToast(message) {
  const toast = document.getElementById("toast");
  toast.textContent = message;
  toast.classList.add("show");
  setTimeout(() => {
    toast.classList.remove("show");
  }, 3000);
}
//–∫–æ–Ω–µ—Ü

document.getElementById("openStudentArchive").addEventListener("click", () => {
  window.location.href = "archive.html"; // –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞—Ä—Ö–∏–≤–∞
});

// –î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
// –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
let accounts = JSON.parse(localStorage.getItem('accounts')) || [];

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É (—É–¥–∞–ª—ë–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã)
let trashAccounts = JSON.parse(localStorage.getItem('trashAccounts')) || [];

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
function saveToLocal() {
  localStorage.setItem('accounts', JSON.stringify(accounts));
}

function saveTrash() {
  localStorage.setItem('trashAccounts', JSON.stringify(trashAccounts));
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫–∏
function updateCounter() {
  const total = accounts.length;
  const active = accounts.filter(a => a.active).length;
  const inactive = total - active;
  document.getElementById('counter').textContent = `–í—Å–µ–≥–æ: ${total} | –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${active} | –ù–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö: ${inactive}`;
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
function renderTable() {
  const container = document.getElementById('accountTable');
  container.innerHTML = "<p style='text-align:center;'>–ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤...</p>";

  setTimeout(() => {
    container.innerHTML = ''; // –æ—á–∏—â–∞–µ–º –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏

    const fragment = document.createDocumentFragment();

    accounts.filter(acc => !acc.archived).forEach((acc) => {
      const card = document.createElement('div');
      card.className = `card ${acc.active ? 'active' : 'inactive'}`;
      card.dataset.id = acc.id;

      card.innerHTML = `
        <p><b>–õ–æ–≥–∏–Ω:</b> ${acc.login}</p>
        <p><b>–ü–∞—Ä–æ–ª—å:</b> ${acc.password}</p>
        <p><b>–°—Ç–∞—Ç—É—Å:</b> ${acc.active ? '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' : '–ù–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'}</p>

        <div class="fab-container">
          <div class="fab-blur"></div>
          <div class="fab-main"><span></span></div>
          <div class="fab-actions">
            <button style="--i: 0;" class="copy-btn"><i class="fas fa-copy"></i></button>
            <button style="--i: 1;" class="toggle-btn"><i class="fas fa-toggle-on"></i></button>
            <button style="--i: 2;" class="delete-btn"><i class="fas fa-trash-alt"></i></button>
          </div>
        </div>
      `;

      fragment.appendChild(card);
    });

    container.appendChild(fragment);
    attachFabListeners();
    updateCounter();
  }, 30); // —á—É—Ç—å-—á—É—Ç—å –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –∏ –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
}

// –ù–∞–≤–µ—à–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
function attachFabListeners() {
  document.querySelectorAll('.fab-main').forEach(button => {
    button.addEventListener('click', (e) => {
      const card = e.currentTarget.closest('.card');
      card.classList.toggle('open');
      e.stopPropagation();
    });
  });

  document.querySelectorAll('.copy-btn').forEach(btn => {
    btn.addEventListener('click', (e) => {
      e.stopPropagation();
      const card = e.currentTarget.closest('.card');
      const id = parseInt(card.dataset.id);
      const acc = accounts.find(a => a.id === id);
      if (acc) {
        navigator.clipboard.writeText(`–õ–æ–≥–∏–Ω: ${acc.login}\n–ü–∞—Ä–æ–ª—å: ${acc.password}`);
        alert("–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!");
      }
addToHistory(`üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å: ${acc.login}`);//—Ö—É–π
    });
  });

  document.querySelectorAll('.toggle-btn').forEach(btn => {
    btn.addEventListener('click', (e) => {
      e.stopPropagation();
      const card = e.currentTarget.closest('.card');
      const id = parseInt(card.dataset.id);
      toggleStatus(id);
    });
  });

  document.querySelectorAll('.delete-btn').forEach(btn => {
    btn.addEventListener('click', (e) => {
      e.stopPropagation();
      const card = e.currentTarget.closest('.card');
      const id = parseInt(card.dataset.id);
      deleteAccount(id);
    });
  });
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
function addAccount() {
  const login = document.getElementById('newLogin').value.trim();
  const password = document.getElementById('newPassword').value.trim();

  if (login && password) {
    const newAccount = {
      id: Date.now(),
      login,
      password,
      active: false,
      archived: false
    };
    accounts.push(newAccount);
    saveToLocal();
    renderTable();
addToHistory(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω –∞–∫–∫–∞—É–Ω—Ç: ${login}`);

    // –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π
    document.getElementById('newLogin').value = '';
    document.getElementById('newPassword').value = '';
  } else {
    alert('–ó–∞–ø–æ–ª–Ω–∏ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å');
  }
}

// –ê–∫—Ç–∏–≤–∞—Ü–∏—è/–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ + –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∞—Ä—Ö–∏–≤
function toggleStatus(id) {
  const acc = accounts.find(a => a.id === id);
  if (!acc) return;

  acc.active = !acc.active;

  if (acc.active) {
    acc.archived = true;
    acc.updatedAt = new Date().toLocaleString("ru-RU");
    alert(`‚úÖ –ê–∫–∫–∞—É–Ω—Ç ${acc.login} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∞—Ä—Ö–∏–≤`);
addToHistory(`‚úÖ –ê–∫–∫–∞—É–Ω—Ç ${acc.login} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ –≤ –∞—Ä—Ö–∏–≤`);
  }

  saveToLocal();
  renderTable();
  
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
function deleteAccount(id) {
  const acc = accounts.find(a => a.id === id);
  if (!acc) return;
  const confirmDelete = confirm(`–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç: ${acc.login}?`);
  if (!confirmDelete) return;
 // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
  trashAccounts.push({ ...acc, deletedAt: new Date().toLocaleString('ru-RU') });
  saveTrash();

  // –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
  accounts = accounts.filter(a => a.id !== id);
  saveToLocal();
  renderTable();
addToHistory(`‚ùå –£–¥–∞–ª—ë–Ω –∞–∫–∫–∞—É–Ω—Ç: ${acc.login}`);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
if (sessionStorage.getItem('restored') === 'true') {
  sessionStorage.removeItem('restored');
  renderTable();
} else {
  renderTable();
}

// –ø–æ–∫–∞–∑ —Å–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö || –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö
const total = accounts.length;
const active = accounts.filter(a => a.active).length;
const inactive = total - active;

document.getElementById('counter').innerText = `–í—Å–µ–≥–æ: ${total} | –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${active} | –ù–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö: ${inactive}`; 

//–±–µ–∑  –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
 if ('serviceWorker' in navigator) {
  navigator.serviceWorker.register('/sw.js')
    .then(() => console.log('SW –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω'))
    .catch(err => console.error('SW –æ—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', err));
}

 //–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π
 // –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
function generatePassword(length = 16) {
  const chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*";
  let password = "";
  for (let i = 0; i < length; i++) {
    password += chars[Math.floor(Math.random() * chars.length)];
  }
  return password;
}

document.getElementById("generate-btn").addEventListener("click", () => {
  document.getElementById("password").value = generatePassword();
});

// –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
document.getElementById("copy-btn").addEventListener("click", () => {
  const passwordField = document.getElementById("password");
  navigator.clipboard.writeText(passwordField.value).then(() => {
    alert("–ü–∞—Ä–æ–ª—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!");
    document.getElementById("generatorModal").style.display = "none"; // –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É
  });
});
// –º–µ–Ω—é 
document.addEventListener("DOMContentLoaded", function () {
  const menuButton = document.getElementById("menuButton");
  const sidebar = document.getElementById("sidebar");

  menuButton.addEventListener("click", function () {
    sidebar.classList.toggle("active");
    menuButton.classList.toggle("open");
  });

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ –æ–±–ª–∞—Å—Ç–∏
  document.addEventListener("click", function (event) {
  const isClickInsideSidebar = sidebar.contains(event.target);
  const isClickOnMenuButton = menuButton.contains(event.target);
  const isClickInsideModal = event.target.closest(".modal-content"); // –º–æ–¥–∞–ª–∫–∏

  if (!isClickInsideSidebar && !isClickOnMenuButton && !isClickInsideModal) {
    sidebar.classList.remove("active");
    menuButton.classList.remove("open");
  }
});
});

//–∫–ª–∏–∫ –≤ –º–µ–Ω—é
// –û—Ç–∫—Ä—ã—Ç—å/–∑–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É
const modal = document.getElementById("modal");
const openCreateBtn = document.getElementById("openCreateModal");
const closeModalBtn = document.getElementById("closeModal");

openCreateBtn.addEventListener("click", () => {
  modal.style.display = "block";
});

closeModalBtn.addEventListener("click", () => {
  modal.style.display = "none";
});

function closeModal() {
  modal.style.display = "none";
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –æ–∫–Ω–∞
window.addEventListener("click", (e) => {
  if (e.target === modal) {
    modal.style.display = "none";
  }
});

// –ö–Ω–æ–ø–∫–∞ "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–¥–æ–≤"
document.getElementById("openGenerator").addEventListener("click", () => {
  document.getElementById("password").scrollIntoView({ behavior: "smooth" });
});

//
// –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–æ–¥–∞–ª–∫–∞
const generatorModal = document.getElementById("generatorModal");
const openGeneratorBtn = document.getElementById("openGenerator");
const closeGeneratorBtn = document.getElementById("closeGeneratorModal");

openGeneratorBtn.addEventListener("click", () => {
  generatorModal.style.display = "block";
});

closeGeneratorBtn.addEventListener("click", () => {
  generatorModal.style.display = "none";
});

window.addEventListener("click", (e) => {
  if (e.target === generatorModal) {
    generatorModal.style.display = "none";
  }
});

//


// –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–∏ —Å–∞—Ö—Ä–æ–Ω–µ–Ω–∏–π 
function closeMenu() {
  document.getElementById("sidebar").classList.remove("active");
  document.getElementById("menuButton").classList.remove("open");
}


//–∏—Å—Ç–æ—Ä–∏—è
// –ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π
let historyLog = JSON.parse(localStorage.getItem('history')) || [];

function addToHistory(action) {
  const time = new Date().toLocaleTimeString();
  historyLog.unshift(`[${time}] ${action}`);
  localStorage.setItem('history', JSON.stringify(historyLog));
}

function renderHistory() {
  const logContainer = document.getElementById("historyLog");
  if (logContainer) {
    logContainer.innerHTML = historyLog.map(entry => `<div class="log-entry">${entry}</div>`).join('');
  }
}

// –ú–æ–¥–∞–ª–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
const historyModal = document.getElementById("historyModal");
const openHistoryBtn = document.getElementById("openHistory");
const closeHistoryBtn = document.getElementById("closeHistoryModal");

if (openHistoryBtn && historyModal && closeHistoryBtn) {
  openHistoryBtn.addEventListener("click", () => {
    renderHistory();
    historyModal.style.display = "block";
  });

  closeHistoryBtn.addEventListener("click", () => {
    historyModal.style.display = "none";
  });

  window.addEventListener("click", (e) => {
    if (e.target === historyModal) {
      historyModal.style.display = "none";
    }
  });
}

//–æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
const clearHistoryBtn = document.getElementById("clearHistoryBtn");

if (clearHistoryBtn) {
  clearHistoryBtn.addEventListener("click", () => {
    const confirmClear = confirm("–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é?");
    if (confirmClear) {
      historyLog = [];
      localStorage.removeItem("history");
      renderHistory();
      addToHistory("üßπ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º");
    }
  });
}

// –æ—Ç–ø—Ä–∞–≤—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
const avitoModal = document.getElementById("avitoModal");
const closeAvitoModal = document.getElementById("closeAvitoModal");
const copyAndGoAvitoBtn = document.getElementById("copyAndGoAvitoBtn");

// –û—Ç–∫—Ä—ã—Ç–∏–µ –∏–∑ –º–µ–Ω—é
document.getElementById("openAvito").addEventListener("click", () => {
  avitoModal.style.display = "block";
  //closeMenu();
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏
closeAvitoModal.addEventListener("click", () => {
  avitoModal.style.display = "none";
});

window.addEventListener("click", (e) => {
  if (e.target === avitoModal) {
    avitoModal.style.display = "none";
  }
});

// üî•üî•üî•–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Ç–∫—Ä—ã—Ç—å –ê–≤–∏—Ç–æ
document.getElementById("copyAndGoAvitoBtn").addEventListener("click", () => {
  const message = document.getElementById("clientText")?.value.trim();
  if (!message) return alert("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è");

  navigator.clipboard.writeText(message).then(() => {
    window.location.href = "https://www.avito.ru/";
  }).catch(() => {
    alert("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç");
  });
});

//—Å–æ–∑–¥–∞—Ç—å —Å—Ç—É–¥ —Ñ—ç–∫
// ======= –ú–û–î–ê–õ–ö–ê –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ =======
// ======= –ú–û–î–ê–õ–ö–ê –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ =======
const fakeModal = document.getElementById("fakeModal");
const genFakeBtn = document.getElementById("genFakeBtn");
const fakeStatus = document.getElementById("fakeStatus");
const closeFakeModal = document.getElementById("closeFakeModal");

document.getElementById("generateFakeStudent").addEventListener("click", () => {
  fakeModal.style.display = "block";
  //closeMenu?.();
});
closeFakeModal.addEventListener("click", () => {
  fakeModal.style.display = "none";
});
window.addEventListener("click", (e) => {
  if (e.target === fakeModal) fakeModal.style.display = "none";
});

// ======= –ò–°–¢–û–†–ò–Ø —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ =======
let studentHistory = JSON.parse(localStorage.getItem("studentHistory")) || [];

function saveStudentHistory() {
  localStorage.setItem("studentHistory", JSON.stringify(studentHistory));
}

function renderStudentHistory() {
  const container = document.getElementById("studentHistoryLog");
  if (!container) return;
  container.innerHTML = studentHistory.map(s => `
    <div class="student-entry">
      <b>${s.name}</b> (${s.birthday})<br>
      Email: ${s.email || '-'}<br>
      –¢–µ–ª–µ—Ñ–æ–Ω: ${s.phone || '-'}<br>
      –ê–¥—Ä–µ—Å: ${s.address || '-'}<br>
      –î–µ–≤–∏—á—å—è —Ñ–∞–º–∏–ª–∏—è –º–∞—Ç–µ—Ä–∏: ${s.maiden || '-'}<br>
      <i>–°–æ–∑–¥–∞–Ω–æ: ${s.createdAt}</i>
    </div>
  `).join('<hr>');
}

function addStudentToHistory(student) {
  const entry = {
    name: student.name,
    birthday: student.birthday,
    email: student.email,
    phone: student.phone,
    address: student.address,
    maiden: student.maiden,
    createdAt: new Date().toLocaleString("ru-RU")
  };
  studentHistory.unshift(entry);
  saveStudentHistory();
  renderStudentHistory();
}

// ======= –ì–ï–ù–ï–†–ê–¶–ò–Ø —Ñ–µ–π–∫-—Å—Ç—É–¥–µ–Ω—Ç–∞ =======
genFakeBtn.addEventListener("click", async () => {
  fakeStatus.textContent = "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...";
  genFakeBtn.disabled = true;

  try {
    const rand = Math.random();
    const proxyUrl = `https://api.allorigins.win/get?url=${encodeURIComponent(
      `https://www.fakenamegenerator.com/advanced.php?t=country&n[]=us&c[]=us&gen=1&age-min=18&age-max=21&rand=${rand}`
    )}`;

    const res = await fetch(proxyUrl);
    const data = await res.json();
    const parser = new DOMParser();
    const doc = parser.parseFromString(data.contents, 'text/html');

    const name = doc.querySelector("h3")?.textContent.trim();
    const address = doc.querySelector(".adr")?.textContent.trim();

    const getField = (label) => {
      const dt = Array.from(doc.querySelectorAll("dl dt")).find(dt => dt.textContent.includes(label));
      return dt ? dt.nextElementSibling?.textContent.trim() : "";
    };

    const student = {
      name,
      address,
      birthday: getField("Birthday"),
      email: getField("Email Address"),
      phone: getField("Phone"),
      maiden: getField("Mother's maiden name")
    };

    addStudentToHistory(student);
    fakeStatus.textContent = "‚úÖ –ì–æ—Ç–æ–≤–æ!";
    fakeModal.style.display = "none";
  } catch (e) {
    console.error(e);
    fakeStatus.textContent = "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏";
  } finally {
    genFakeBtn.disabled = false;
    setTimeout(() => (fakeStatus.textContent = ""), 3000);
  }
});

// ======= –ò–°–¢–û–†–ò–Ø –º–æ–¥–∞–ª–∫–∞ =======
const studentHistoryModal = document.getElementById("studentHistoryModal");
const closeStudentHistoryModal = document.getElementById("closeStudentHistoryModal");

document.getElementById("openStudentHistory").addEventListener("click", () => {
  renderStudentHistory();
  studentHistoryModal.style.display = "block";
  //closeMenu?.();
});
closeStudentHistoryModal.addEventListener("click", () => {
  studentHistoryModal.style.display = "none";
});
window.addEventListener("click", (e) => {
  if (e.target === studentHistoryModal) studentHistoryModal.style.display = "none";
});

// ======= –û–ß–ò–°–¢–ö–ê –∏—Å—Ç–æ—Ä–∏–∏ =======
document.getElementById("clearStudentHistoryBtn").addEventListener("click", () => {
  if (confirm("–£–¥–∞–ª–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —Å—Ç—É–¥–µ–Ω—Ç–æ–≤?")) {
    studentHistory = [];
    localStorage.removeItem("studentHistory");
    renderStudentHistory();
    addToHistory?.("üßπ –ò—Å—Ç–æ—Ä–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –æ—á–∏—â–µ–Ω–∞");
  }
});


// –∫–∞—Ä–∑–∏–Ω–∞
document.getElementById("trashShortcut").addEventListener("click", () => {
  window.location.href = "deleted.html"; // –∏–ª–∏ –¥—Ä—É–≥–æ–π –ø—É—Ç—å –∫ –∫–æ—Ä–∑–∏–Ω–µ
});

// –∫–∞—Ä–∑–∏–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è –≤–æ—Å—Ç
function renderTrash() {
  const container = document.getElementById('trashContainer');
  container.innerHTML = '';

  if (trashAccounts.length === 0) {
    container.innerHTML = '<p>–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.</p>';
    return;
  }

  trashAccounts.forEach(acc => {
    container.innerHTML += `
      <div class="card deleted">
        <p><b>–õ–æ–≥–∏–Ω:</b> ${acc.login}</p>
        <p><b>–ü–∞—Ä–æ–ª—å:</b> ${acc.password}</p>
        <p><b>–£–¥–∞–ª—ë–Ω:</b> ${acc.deletedAt}</p>
        <button class="btn" onclick="restoreAccount(${acc.id})">–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å</button>
      </div>
    `;
  });
}
function restoreAccount(id) {
  const acc = trashAccounts.find(a => a.id === id);
  if (!acc) return;

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ
  const accounts = JSON.parse(localStorage.getItem('accounts')) || [];
  accounts.push({ ...acc, archived: false, active: false });
  localStorage.setItem('accounts', JSON.stringify(accounts));

  // –£–¥–∞–ª—è–µ–º –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
  trashAccounts = trashAccounts.filter(a => a.id !== id);
  localStorage.setItem('trashAccounts', JSON.stringify(trashAccounts));

  renderTrash();
}